/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mobilyze2;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonModel;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;

/**
 *
 * @author Laith
 */
public class mobJFrame extends javax.swing.JFrame{

    /**
     * Creates new form mobJFrame
     */
    public mobJFrame() {
        initComponents();
        displayApps();
    }
    public ArrayList<MobApp> loadedApps = loadApps();
    
    public ArrayList<MobApp> loadApps() {
        int ctr = 0;
        try {
            
            BufferedReader in = new BufferedReader(new FileReader("config.txt"));
            String currentLine;
            // Read objects
            String[] args = new String[100];
            ArrayList<MobApp> apps = new ArrayList<>();
            String name = "";
            String location1 = "";
            String location2 = "";
            String location3 = "";
            String table = "";
            ArrayList<String> tableColumns = new ArrayList<String>();
            while ((currentLine = in.readLine()) != null && currentLine.contains("\t")) {
                ctr = 0;
                tableColumns = new ArrayList<>();
                args = currentLine.split("\t");
                
                name = args[0];
                location1 = args[1];
                location2 = args[2];
                location3 = args[3];
                table = args[4];
                
                currentLine = in.readLine();
                args = currentLine.split("\t");
                
                while (ctr < args.length) {
                    tableColumns.add(args[ctr]);
                    ctr++;
                }
                apps.add(new MobApp(name, location1, location2, location3, table, tableColumns));
            }
            in.close();
            return apps;

        } catch (FileNotFoundException e) {
            System.out.println("File not found");

        } catch (IOException e) {
            System.out.println("Error initializing stream");
        }
        return null;
    }
    
    public void displayApps(){
        int ctr = 0;
        int size = loadedApps.size();
        String[] appNames = new String[size];
        
        while(ctr < size){
            appNames[ctr] = loadedApps.get(ctr).getName();
            ctr++;
        }
        
        DefaultComboBoxModel model = new DefaultComboBoxModel(appNames);
        jComboBox1.setModel((ComboBoxModel<String>) model);
    }
    
    private MobApp getApp(){
        int androidVersion = 0;
        
        if (jComboBox2.getSelectedIndex() == 0){
            androidVersion = 1;
        }
        else if (jComboBox2.getSelectedIndex() == 1){
            androidVersion = 2;
        }
        else if (jComboBox2.getSelectedIndex() == 2){
            androidVersion = 3;
        }
        
        MobApp selectedApp = loadedApps.get(jComboBox1.getSelectedIndex());
        selectedApp.setAndroidVersion(androidVersion);
        return selectedApp;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        jFileChooser1.setDialogTitle("Select text file");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mobilize v2.0");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/mobilyze2/MobilizeLogo.png")).getImage());

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "contacts", "messages", "phone", "whatsapp", "snapchat" }));

        jLabel1.setText("Load Database:");

        jButton1.setText("Load DB");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Modify Row");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Add Row");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Delete Row");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        jTable1.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jButton5.setText("Import Textfile");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Delete All");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nougat", "Oreo", "Pie" }));

        jLabel2.setText("Android Version:");

        jButton7.setText("Mount");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Image");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(57, 57, 57))
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 853, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(49, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox1, 0, 92, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButton7)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        getApp().FillTable(jTable1);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        getApp().updateRow(jTable1);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        getApp().insertRow(jTable1);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        getApp().deleteRow(jTable1);
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int returnVal = jFileChooser1.showOpenDialog(this);
        String filePath = "";
        if (returnVal == jFileChooser1.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            filePath = file.getAbsolutePath();
            
        } else {
            System.out.println("File access cancelled by user.");
        }
        
        getApp().importFile(jTable1, filePath);
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        getApp().deleteAllRows();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        jFileChooser1.setDialogTitle("Select Image to Mount");
        int returnVal = jFileChooser1.showOpenDialog(this);
        String filePath = "";
        if (returnVal == jFileChooser1.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            filePath = file.getAbsolutePath();
            
        } else {
            System.out.println("File access cancelled by user.");
            return;
        }
        
        jFileChooser1.setDialogTitle("Select Mount Point");
        jFileChooser1.setFileSelectionMode(jFileChooser1.DIRECTORIES_ONLY);
        int returnVal2 = jFileChooser1.showOpenDialog(this);
        String filePath2 = "";
        if (returnVal2 == jFileChooser1.APPROVE_OPTION) {
            filePath2 = jFileChooser1.getCurrentDirectory().toString();
            
        } else {
            System.out.println("File access cancelled by user.");
            return;
        }
        
        String command = "sudo mount " + filePath + " " + filePath2;

        Process proc = null;
        try {
            proc = Runtime.getRuntime().exec(command);
        } catch (IOException ex) {
            Logger.getLogger(mobJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Read the output
        // Read the output

        BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));
        String line = "";
        try {
            while((line = reader.readLine()) != null) {
                System.out.print(line + "\n");
            }
        } catch (IOException ex) {
            Logger.getLogger(mobJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        try { 
            proc.waitFor();
        } catch (InterruptedException ex) {
            Logger.getLogger(mobJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        jFileChooser1.setDialogTitle("Select Image File Destination");
        jFileChooser1.setFileSelectionMode(jFileChooser1.DIRECTORIES_ONLY);
        int returnVal1 = jFileChooser1.showOpenDialog(this);
        String filePath1 = "";
        if (returnVal1 == jFileChooser1.APPROVE_OPTION) {
            filePath1 = jFileChooser1.getCurrentDirectory().toString();
            
        } else {
            System.out.println("File access cancelled by user.");
        }
        
        String command = "sudo adb devices";
        ArrayList<String> cmdOutput= new ArrayList<String>();

        Process proc = null;
        try {
            proc = Runtime.getRuntime().exec(command);
        } catch (IOException ex) {
            Logger.getLogger(mobJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Read the output
        // Read the output

        BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));
        String line = "";
        try {
            while((line = reader.readLine()) != null) {
                System.out.print(line + "\n");
                cmdOutput.add(line);
            }
        } catch (IOException ex) {
            Logger.getLogger(mobJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        try { 
            proc.waitFor();
        } catch (InterruptedException ex) {
            Logger.getLogger(mobJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(cmdOutput.get(1) == null || cmdOutput.get(1).equals("")){
            return;
        }
        int i = 0;
        boolean found = false;
        StringTokenizer st = new StringTokenizer(cmdOutput.get(1), "\t");
        while (i<=1){
            if (st.nextToken().equals("device")){
                System.out.print("Device Found");
                found = true;
            }
            i++;
        }
        if (found == false){
            System.out.print("No Device Found");
            return;
        }
//        command = "adb shell \"su -c 'ls /mnt/media_rw'\"";
//        System.out.print(command);
//        ArrayList<String> cmdOutput2= new ArrayList<>();
//
//        Process proc2 = null;
//        try {
//            proc2 = Runtime.getRuntime().exec(command);
//        } catch (IOException ex) {
//            Logger.getLogger(mobJFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        // Read the output
//        System.out.print("cmd did executed");
//        BufferedReader reader2 = new BufferedReader(new InputStreamReader(proc2.getInputStream()));
//        line = "";
//        try {
//            System.out.print("reader2 is null???");
//            while((line = reader2.readLine()) != null) {
//                System.out.print(line + "\n");
//                System.out.print("should show cmd ouput");
//                cmdOutput2.add(line);
//            }
//        } catch (IOException ex) {
//            Logger.getLogger(mobJFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        try { 
//            proc2.waitFor();
//        } catch (InterruptedException ex) {
//            Logger.getLogger(mobJFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        String media_name = "";
//        System.out.print("why is this showing1");
//        if (cmdOutput2.get(0) == null || cmdOutput2.get(0).equals("")){
//            System.out.print("why is this showing2");
//            return;
//        }
//        else{
//            System.out.print("why is this showing3");
//            media_name = cmdOutput2.get(0);
//        }
        String media_name = "2652-4DF2";
        command = "adb shell \"su -c 'dd if=/dev/block/bootdevice/by-name/userdata of=/mnt/media_rw/" + media_name + "/userdata bs=2048'\"";
        System.out.print(command);
        //dd if=/dev/block/bootdevice/by-name/userdata of=/mnt/media_rw/2652-4DF2/userdata bs=2048
        cmdOutput= new ArrayList<>();

        proc = null;
        try {
            proc = Runtime.getRuntime().exec(command);
        } catch (IOException ex) {
            Logger.getLogger(mobJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Read the output
        // Read the output

        reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));
        line = "";
        try {
            while((line = reader.readLine()) != null) {
                System.out.print(line + "\n");
                cmdOutput.add(line);
            }
        } catch (IOException ex) {
            Logger.getLogger(mobJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        try { 
            proc.waitFor();
        } catch (InterruptedException ex) {
            Logger.getLogger(mobJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        command = "adb pull /mnt/media_rw/" + media_name + "/userdata " + filePath1;
        //dd if=/dev/block/bootdevice/by-name/userdata of=/mnt/media_rw/2652-4DF2/userdata bs=2048
        cmdOutput= new ArrayList<>();

        proc = null;
        try {
            proc = Runtime.getRuntime().exec(command);
        } catch (IOException ex) {
            Logger.getLogger(mobJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Read the output
        // Read the output

        reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));
        line = "";
        try {
            while((line = reader.readLine()) != null) {
                System.out.print(line + "\n");
                cmdOutput.add(line);
            }
        } catch (IOException ex) {
            Logger.getLogger(mobJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        try { 
            proc.waitFor();
        } catch (InterruptedException ex) {
            Logger.getLogger(mobJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.print("Imaging Complete!");
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mobJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mobJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mobJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mobJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new mobJFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
